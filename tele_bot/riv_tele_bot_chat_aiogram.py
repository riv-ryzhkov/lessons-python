#  riv  @riv_chat_bot
# pip install fuzzywuzzy
# pip install -U aiogram


from aiogram import Bot, types # —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –±–æ—Ç–∞ —ñ —Ç–∏–ø—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
from aiogram.dispatcher import Dispatcher # –∞—Å—ñ–Ω—Ö—Ä–æ–Ω–Ω–∏–π —Ä–µ–∂–∏–º
from aiogram.utils import executor # –∑–∞–ø—É—Å–∫ –ø–æ–ª–ª—ñ–Ω–≥—É

import os
from fuzzywuzzy import fuzz
import datetime
from my_token import token_chat

import speech_recognition


def chat_run(massive):
    if os.path.exists('data/riv-chat.txt'):
        with open('data/riv-chat.txt', 'r') as file:
            for line in file:
                if len(line.strip()) > 2:
                    massive.append(line.strip())


# –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fuzzywuzzy –¥–ª—è –ø—ñ–¥–±–æ—Ä—É –Ω–∞–π–±—ñ–ª—å—à —Å—Ö–æ–∂–æ—ó —Ñ—Ä–∞–∑–∏ —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å
def answer(text):
    try:
        text = text.lower().strip()
        if os.path.exists('data/riv-chat.txt'):
            max_rate = 0
            place = 0
            max_place = 0
            for question in massive:
                if 'q: ' in question:
                    # –ó–∞ –¥–æ–ø–æ–º–æ–≥–æ—é fuzzywuzzy –ø–æ—Ä—ñ–≤–Ω—é—î–º–æ —Ä—è–¥–∫–∏
                    current = (fuzz.token_sort_ratio(question.replace('q: ', ''), text))
                    if current > max_rate and current != max_rate:
                        max_rate = current
                        max_place = place
                place += 1
            result = massive[max_place + 1]
            return result
        else:
            return '–¶–µ –¥—É–∂–µ —Å–∫–ª–∞–¥–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è. –Ø –ø–æ–º—ñ—Ä–∫—É—é —ñ –ø—Ä–æ–∫–æ–º–µ–Ω—Ç—É—é –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä–∞–∑—É.'
    except Exception as err:
        return '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫ –∑ –Ω–∞—à–∏–º —á–∞—Ç–æ–º. –ê–ª–µ —è –∑–≥–æ–¥–æ–º —Ä–æ–∑–±–µ—Ä—É—Å—è. –û–±—ñ—Ü—è—é!'



def listen_command():
    """Func will return the recognized command"""
    sr = speech_recognition.Recognizer()
    # sr.pause_threshold = 0.5
    try:
        with speech_recognition.Microphone() as mic:
            sr.adjust_for_ambient_noise(source=mic, duration=0.5)
            audio = sr.listen(source=mic)
            query = sr.recognize_google(audio_data=audio, language='uk-UA').lower()
        return query
    except speech_recognition.UnknownValueError:
        return '–í–∏–±–∞—á–∞—é—Å—å, –Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤, —â–æ –í–∏ –∫–∞–∂–µ—Ç–µ, \n–ø—Ä–æ—Ç–µ –Ø —Å–ø—Ä–æ–±—É—é –≤–≥–∞–¥–∞—Ç–∏,' \
               ' \n\n–ê–ª–µ, —è–∫—â–æ —è –ø–æ–º–∏–ª–∏–≤—Å—è, –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –í–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è –±—ñ–ª—å—à —á—ñ—Ç–∫–æ ' \
               '—ñ –∑ –Ω–µ–≤–µ–ª–∏—á–∫–æ—é –ø–∞—É–∑–æ—é –ø—ñ—Å–ª—è –≤–≤–æ–¥—É "1"\n\n –î—è–∫—É—é.'


def chat_keys(key_level):
    if key_level == "1.0":
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üë® –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ button-–ø–æ–º—ñ—á–Ω–∏–∫–∞.")
        markup.add(item1)
    elif key_level == '2.0':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üëç –£–º–æ–≤–∏ –º–æ—î—ó —Ä–æ–±–æ—Ç–∏ –∑–∞—Ä–∞–∑...")
        # markup.add(item1)
        item2 = types.KeyboardButton("üíº –ü—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –¥–æ—Å–≤—ñ–¥...")
        # markup.add(*[item1, item2])
        item3 = types.KeyboardButton("üá∫üá∏ –Ü–Ω–æ–∑–µ–º–Ω–∞ –º–æ–≤–∞...")
        # markup.add(item3)
        item4 = types.KeyboardButton("üë®‚Äçüëß‚Äçüë¶ Soft skills...")
        markup.add(*[item1, item2, item3])
        item5 = types.KeyboardButton("ü§´ –ú–æ—ó –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è...")
        markup.add(*[item4, item5])
    elif key_level == '2.1':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üë®‚Äçüè´ –ú–æ—î –º—ñ—Å—Ü–µ —Ä–æ–±–æ—Ç–∏ –∑–∞—Ä–∞–∑.")
        # markup.add(item1)
        item2 = types.KeyboardButton("üë®‚Äçüéì –ú–æ—è –ø–æ—Å–∞–¥–∞ –∑–∞—Ä–∞–∑.")
        # markup.add(item2)
        item3 = types.KeyboardButton("üí∞ –ú–æ—è –∑–∞—Ä–ø–ª–∞—Ç–Ω—è –∑–∞—Ä–∞–∑.")
        markup.add(*[item1, item2, item3])
        item4 = types.KeyboardButton("üïò –°—Ç–∞–∂ —Ü—ñ—î—ó —Ä–æ–±–æ—Ç–∏.")
        # markup.add(item4)
        item5 = types.KeyboardButton("‚¨ÜÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        markup.add(*[item4, item5])
    elif key_level == '2.2':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üíº –î–µ, —Å–∫—ñ–ª—å–∫–∏ —ñ –∫–∏–º –ø—Ä–∞—Ü—é–≤–∞–≤.")
        # markup.add(item1)
        item2 = types.KeyboardButton("üë®‚Äçüíª –î–æ—Å–≤—ñ–¥ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è.")
        # markup.add(item2)
        item3 = types.KeyboardButton("üêç –î–æ—Å–≤—ñ–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Python.")
        markup.add(*[item1, item2, item3])
        item4 = types.KeyboardButton("üõ† –Ü–Ω—à—ñ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—ó —Ç–∞ –ü–ó, —â–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ.")
        # markup.add(item4)
        item5 = types.KeyboardButton("‚¨ÜÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        markup.add(*[item4, item5])
    elif key_level == '2.3':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üá∫üá∏ –Ø–∫–∏–º–∏ –Ü–Ω.–º–æ–≤–∞–º–∏ –≤–æ–ª–æ–¥—ñ—î—Ç–µ —ñ –Ω–∞ —è–∫–æ–º—É —Ä—ñ–≤–Ω—ñ.")
        # markup.add(item1)
        item2 = types.KeyboardButton("üåê –Ü–Ω.–º–æ–≤–∞ —É –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω—ñ–π –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ.")
        # markup.add(item2)
        item3 = types.KeyboardButton("üë®‚Äçüéì –Ü–Ω.–º–æ–≤–∞ —É –≤–∏–∫–ª–∞–¥–∞—Ü—å–∫—ñ–π –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ.")
        markup.add(*[item1, item2, item3])
        item4 = types.KeyboardButton("‚úàÔ∏è –î–æ—Å–≤—ñ–¥ –∑–∞—Ä—É–±—ñ–∂–Ω–∏—Ö –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏—Ö —Å—Ç–∞–∂—É–≤–∞–Ω—å.")
        # markup.add(item4)
        item5 = types.KeyboardButton("‚¨ÜÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        markup.add(*[item4, item5])
    elif key_level == '2.4':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üë®‚Äçüë®‚Äçüëß‚Äçüëß –î–æ—Å–≤—ñ–¥ —Ä–æ–±–æ—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ.")
        # markup.add(item1)
        item2 = types.KeyboardButton("ü´µ –î–æ—Å–≤—ñ–¥ –æ—Ä–≥–∞–Ω—ñ–∑–∞—Ü—ñ–π–Ω–æ—ó –¥—ñ—è–ª—å–Ω–æ—Å—Ç—ñ.")
        # markup.add(item2)
        item3 = types.KeyboardButton("üé§ –ù–∞—è–≤–Ω—ñ—Å—Ç—å –æ—Ä–∞—Ç–æ—Ä—Å—å–∫–∏—Ö –∑–¥—ñ–±–Ω–æ—Å—Ç–µ–π.")
        markup.add(*[item1, item2, item3])
        item4 = types.KeyboardButton("ü§ù –î–æ—Å–≤—ñ–¥ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–≤–∏–Ω –∑ –ø–∞—Ä—Ç–Ω–µ—Ä–∞–º–∏.")
        # markup.add(item4)
        item5 = types.KeyboardButton("üí™ –Ü–Ω—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ —è–∫–æ—Å—Ç—ñ.")
        # markup.add(item5)
        item6 = types.KeyboardButton("‚¨ÜÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        markup.add(*[item4, item5, item6])
    elif key_level == '2.5':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("üòâ –ü—Ä–∏—á–∏–Ω–∞ –ø–æ—à—É–∫—É –Ω–æ–≤–æ—ó —Ä–æ–±–æ—Ç–∏.")
        # markup.add(item1)
        item2 = types.KeyboardButton("‚è∞ FullTime vs PartTime.")
        # markup.add(item2)
        item3 = types.KeyboardButton("‚åõÔ∏è –û—á—ñ–∫—É—î–º–∏–π —Ä–µ–∂–∏–º —Ä–æ–±–æ—Ç–∏.")
        markup.add(*[item1, item2, item3])
        item4 = types.KeyboardButton("üí∞ –û—á—ñ–∫—É—î–º–∞ –∑–∞—Ä–æ–±—ñ—Ç–Ω–∞ –ø–ª–∞—Ç–Ω—è.")
        # markup.add(item4)
        item5 = types.KeyboardButton("üåà –Ü–Ω—à—ñ –æ—Å–æ–±–∏—Å—Ç—ñ —Å–ø–æ–¥—ñ–≤–∞–Ω–Ω—è —Ç–∞ —É–º–æ–≤–∏.")
        # markup.add(item5)
        item6 = types.KeyboardButton("‚¨ÜÔ∏è –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.")
        markup.add(*[item4, item5, item6])
    else:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    return markup

help = '''
–ó–≤–µ—Ä—Ç–∞—é –í–∞—à—É —É–≤–∞–≥—É –Ω–∞ —Ç–µ, —â–æ –í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è —É —Ä—ñ–∑–Ω—ñ —Å–ø–æ—Å–æ–±–∏:
                
1) –í–∏ –º–∞—î—Ç–µ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –≤—ñ–ª—å–Ω–æ –Ω–∞–±–∏—Ä–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.
                
2) –í–∏ –º–æ–∂–µ—Ç–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å button-–ø–æ–º—ñ—á–Ω–∏–∫–æ–º. 
–î–ª—è —Ü—å–æ–≥–æ –í–∞–º –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ—Å—Ç–∏ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ —Å–ª–æ–≤–æ "–º–µ–Ω—é", –∞–±–æ, —è–∫—â–æ –º–µ–Ω—é –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–æ, —É –±—É–¥—å-—è–∫—É –º–∏—Ç—å –í–∏ –º–æ–∂–µ—Ç–µ –π–æ–≥–æ –∑–≥–æ—Ä–Ω—É—Ç–∏ —á–∏ —Ä–∞–∑–≥–æ—Ä–Ω—É—Ç–∏, –Ω–∞—Ç–∏—Å–Ω—É–≤—à–∏ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫ –ø—Ä–∞–≤–æ—Ä—É—á –Ω–∞ —Ä—è–¥–∫—É –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç—É. (–∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —É—Å—ñ –ø—É–Ω–∫—Ç–∏ –º–µ–Ω—é).
                
3) –°–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–æ—Å—Ç–∞–≤–∏—Ç–∏ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–º.
–î–ª—è —Ü—å–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –º–µ–Ω—ñ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ "1" —ñ —Å–ø–æ–∫—ñ–π–Ω–æ –ø–æ—Å—Ç–∞–≤—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä–æ—Å—Ç–æ –≥–æ–ª–æ—Å–æ–º —á–µ—Ä–µ–∑ –º—ñ–∫—Ä–æ—Ñ–æ–Ω. –ü–æ—Å–ø—ñ—à–∞—Ç–∏ —ñ –¥–æ–¥–∞—Ç–∫–æ–≤–æ –Ω—ñ—á–æ–≥–æ –Ω–∞—Ç–∏—Å–∫–∞—Ç–∏ –Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ.

–î–õ–Ø –û–¢–†–ò–ú–ê–ù–ù–Ø –¶–Ü–Ñ–á –ü–Ü–î–ö–ê–ó–ö–ò –í–í–ï–î–Ü–¢–¨ –ö–û–ú–ê–ù–î–£ "/help".
                
–í–ê–ñ–õ–ò–í–û! –Ø–∫—â–æ –í–∏ –Ω–µ –∑–∞–ø–µ—Ä–µ—á—É—î—Ç–µ, —Ü–µ–π —á–∞—Ç –±—É–¥–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑–∞–ø–∏—Å—É–≤–∞—Ç–∏—Å—å. –¶–µ –¥–æ–∑–≤–æ–ª–∏—Ç—å –º–µ–Ω—ñ –π–æ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏, –ø–æ–ª—ñ–ø—à–∏—Ç–∏ —ñ –≤—ñ–¥–∫–æ—Ä–µ–∫—Ç—É–≤–∞—Ç–∏ –¥–µ—è–∫—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ.

–î—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è.
    
–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –≤–≤–µ–¥—ñ—Ç—å "–î—è–∫—É—é", –∞ –ø–æ—Ç—ñ–º - "–ù—ñ" —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –ø—Ä–æ–ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥.
                
–ó –Ω–µ—Ç–µ—Ä–ø—ñ–Ω–Ω—è–º –æ—á—ñ–∫—É—é –Ω–∞ –í–∞—à–µ –ø–µ—Ä—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è...
                '''


def chat_main(bot, st, name, key_level):
    mark = '0'
    # –ö–æ–º–∞–Ω–¥–∞ ¬´start¬ª
    @dp.message_handler(commands=['start', 's'])
    async def start(message: types.Message):
        global st, mark
        start_text = f'–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, {message.from_user.first_name} {message.from_user.last_name}!'
        start_text += '''
        
        –ú–µ–Ω–µ –∑–≤—É—Ç—å –Ü–≥–æ—Ä –†–∏–∂–∫–æ–≤.
        
        –ü—Ä–æ—Ç–µ, –Ω–∞—Ä–∞–∑—ñ —è –Ω–µ –∑–æ–≤—Å—ñ–º –Ü–≥–æ—Ä. )))
        –Ø –±–æ—Ç, —Å—Ç–≤–æ—Ä–µ–Ω–∏–π –Ω–∏–º. 
        
–ê–ª–µ —è –¥—É–∂–µ –¥–æ–±—Ä–µ –∑–Ω–∞—é –Ü–≥–æ—Ä—è —ñ –≥–∞–¥–∞—é, —â–æ –∑–º–æ–∂—É –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –±—É–¥—å-—è–∫—ñ –í–∞—à—ñ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è.
–°–ø–æ–¥—ñ–≤–∞—é—Å—å, –Ω–∞—à–µ —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –±—É–¥–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–∏–º —ñ –∫–æ—Ä–∏—Å–Ω–∏–º.\n
        '''
        start_text += f'{message.from_user.first_name}, c–∫–∞–∂—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —è–∫ —è –º–æ–∂—É –¥–æ –í–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?'
        st = 1
        await message.reply(start_text)

    @dp.message_handler(commands=['help', 'h'])
    async def start(message: types.Message):
        start_text = help
        await message.reply(start_text)


    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é–∑–µ—Ä–∞
    @dp.message_handler()
    async def handle_text(message: types.Message):
        global st, name, key_level, mark
        print('.'*80)
        m = ''
        for i in message.text:
            if ord(i) < 3000:
                m += i
        message.text = m
        if message.text == '1':
            mark = '1'
            print('–≥–æ–ª–æ—Å–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è!  mark=', mark, 'key_level=', key_level)
        elif key_level != '0.0':
            print('—Ä–æ–±–æ—Ç–∞ –∑ –º–µ–Ω—é! mark=', mark, 'key_level=', key_level)
        else:
            print('–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è! mark=', mark, 'key_level=', key_level)
        try:
            if st == 1:
                name = message.text
                send_text = f'–î—É–∂–µ –ø—Ä–∏—î–º–Ω–æ, {name}.\n'
                send_text += '''
–Ø –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ –í–∏ –æ–∑–Ω–∞–π–æ–º–∏–ª–∏—Å—å –∑ –º–æ—ó–º CV.
–ü—Ä–æ—Ç–µ, –≤–æ–Ω–æ –Ω–∞–¥—Ç–æ –∫–æ—Ä–æ—Ç–∫–µ –¥–ª—è –ø–æ–≤–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó.
                
–¢–æ–∂, —è —É–≤–∞–∂–Ω–æ —Å–ª—É—Ö–∞—é –í–∞—Å —ñ –≥–æ—Ç–æ–≤ —Ä–æ–∑–ø–æ–≤—ñ—Å—Ç–∏ –ø—Ä–æ —Å–µ–±–µ.
–í–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç–∏ –±—É–¥—å-—è–∫–µ –ø–∏—Ç–∞–Ω–Ω—è —ñ —è –æ–±—ñ—Ü—è—é —â–∏—Ä–æ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏ –Ω–∞ –Ω—å–æ–≥–æ.
                ''' + help
            else:
                if message.text == "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ button-–ø–æ–º—ñ—á–Ω–∏–∫–∞.":
                    key_level = "2.0"
                else:
                    key_level = '0.0'
            
            if message.text == '1':
                await bot.send_message(message.from_user.id, '"üé§ –ì–æ–ª–æ—Å–æ–≤–∏–π –≤–≤–æ–¥". –ù—ñ—á–æ–≥–æ –Ω–µ –Ω–∞—Ç–∏—Å–∫–∞–π—Ç–µ, –ø—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä—ñ—Ç—å —É –º—ñ–∫—Ä–æ—Ñ–æ–Ω. –Ø –í–∞—Å —É–≤–∞–∂–Ω–æ —Å–ª—É—Ö–∞—é...')
                mark = '1'
                message.text = listen_command().lower()
                key_level = '0.0'
                await bot.send_message(message.from_user.id, message.text)
            print(message.text)

            if st:
                st = 0
            else:
                send_text = answer(message.text)[:-3]
                key_level = answer(message.text)[-3:]
            # –ó–∞–ø–∏—Å –ª–æ–≥i–≤
            info = '\n' + '.'*80
            if mark == '1':
                info += '\n–≥–æ–ª–æ—Å–æ–≤–µ –ø–∏—Ç–∞–Ω–Ω—è!  mark=' + mark + ' key_level=' + key_level
            elif key_level != '0.0':
                info += '\n—Ä–æ–±–æ—Ç–∞ –∑ –º–µ–Ω—é! mark=' + mark + ' key_level=' + key_level
            else:
                info += '\n–∫–ª–∞–≤—ñ–∞—Ç—É—Ä–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è! mark=' + mark + ' key_level=' + key_level
            send_msg = info
            send_msg += '\nq: ' + message.text + '\n' + send_text + '\n>>> ' + str(datetime.datetime.now()) + '\n'
            with open('data/' + str(message.chat.id) + '_log.txt', 'a') as f:
                f.write(send_msg)

             # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            markup = chat_keys(key_level)
            if key_level != '0.0':
                await bot.send_message(message.from_user.id, send_text, reply_markup=markup)
            else:
                await bot.send_message(message.from_user.id, send_text)
        except Exception as err:
            print(err)
            sorry_text = f'–©–∏—Ä–æ –≤–∏–±–∞—á–∞—é—Å—å, {name}!'
            sorry_text +='''
            –©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫... –Ø –æ–±–æ–≤'—è–∑–∫–æ–≤–æ –≤—Å–µ –∑'—è—Å—É—é —ñ –≤–∏–ø—Ä–∞–≤–ª—é —Ü—é —Å–∏—Ç—É–∞—Ü—ñ—é.
            –ê –∑–∞—Ä–∞–∑ –ø—Ä–æ—à—É –ø–æ–≤—Ç–æ—Ä–∏—Ç–∏ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —ñ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ "—Å–º–∞–π–ª–∏–∫–∏", 
            –∞–±–æ —â–µ —è–∫—ñ—Å—å —Å–∫–ª–∞–¥–Ω—ñ –¥–æ —Å–ø—Ä–∏–π–Ω—è—Ç—Ç—è —Å–∏–º–≤–æ–ª–∏.
            
            –î—è–∫—É—é –∑–∞ —Ä–æ–∑—É–º—ñ–Ω–Ω—è. 
            '''
            await bot.send_message(message.from_user.id, sorry_text)


if __name__ == '__main__':
    # –°—Ç–≤–æ—Ä—é—î–º–æ –±–æ—Ç
    bot = Bot(token=token_chat)
    # bot = Bot(token=token_chat, parse_mode=types.ParseMode.HTML)
    dp = Dispatcher(bot)
    st = 0 # –º–µ—Ä–∫–µ—Ä —Å—Ç–∞—Ä—Ç—É –¥–ª—è –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞
    mark = '0' # –º–∞—Ä–∫–µ—Ä –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥—É
    massive = [] # –º–∞—Å–∏–≤ –ø–∏—Ç–∞–Ω—å —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π
    name = '' # —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    key_level = "0.0" # –Ω–∞–≤—ñ–≥–∞—Ç–æ—Ä –ø–æ –º–µ–Ω—é
    # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ—Ä–∞–∑–∏ —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —É —Å–ø–∏—Å–æ–∫
    chat_run(massive)
    chat_main(bot, st, name, key_level)
    executor.start_polling(dp)

